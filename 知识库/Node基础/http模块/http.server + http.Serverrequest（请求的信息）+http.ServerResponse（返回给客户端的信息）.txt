http.server的事件
1>http.server是一个基于事件的http服务器，所有请求都被封装成独立的事件，开发者只有对它的事件编写相应函数，实现http服务器的所有功能。
2>它继承于EventEmitter，提供了以下事件：
a.request：当客户端请求到来时，该事件被触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例，表示请求和响应信息
b.connection：当TCP连接建立时，该事件被触发，提供一个参数socket，为net.Socket的实例(底层协议底下)
c.close：当服务器关闭时，该事件被触发
3>除此之外还有checkContinue、upgrade、clientError事件
4>最常用和关心的是“request事件”，http提供了:
http.createServer([requestListener])
5>例子：
var http = require('http');
var server = new http.Server();

server.on('request',function(req,res){
    req.writeHead(200,{'Content-Type':'text/html'});
    req.write('<h1>we are node coder<h1>');
    res.end('<p>node coding is end</p>');
});
6>结果


http.Serverrequest（请求的信息）
1>此对象是后端开发者最关注的内容，它一般由http.Server的request事件发送，作为第一个参数传递，通常简写成request或req。
2>http请求分为两部分：请求头和请求体。
3>请求内容端的直接在请求头解析完成后立即读取，而请求体可能相对较长，需要一定的事件传输，因为提供了三个事件用于控制请求体传输：
a.data：当请求体数据到来时，该事件被触发，该事件只有一个参数chunk，表示接受到的数据
b.end：当请求体数据传输完成时，该事件被触发，此后将不会再有数据的到来
c.close：当前用户请求结束时，该事件被触发，不同于end，如果用户强制终止了传输，也会触发close
4>serverRequest的属性：
a.complete：客户端请求是否已经发送完成
b.httpVersion：HTTP协议版本，通常是1.0或者1.1
c.method:：Http请求方法，如GET、POST
d.url：原始的请求路径 例如 pc/getUser或者、user？name=will
f.headers：HTTP请求头
g.trails：HTTP请求尾（不常见）
h.connection： 当前http连接套间字，为net.Socket的实例
i.socket：connection属性的别名
j.client：client属性的别名

http.ServerResponse（返回给客户端的信息）
1>决定了用户最终能得到的结果。它是由http.Server的request事件发送的，作为第一个参数传递，一般为response或res。
2>主要的是三个函数：
a.reponse.writeHead(statusCode, [headers]：向请求的客户端发送响应头
1)Statuscode是http的状态码，如200为成功，404未找到等
2)headers是一个类似关联数组的对象，表示响应头的每个属性
b.response.write(data,[encoding])：向请求客户端发送响应内容
1)data是buffer或字符串
2)encoding为编码
c.response.end([data],[encoding])：响应结束，告知用户所有发送已经完成，当所有要返回的内容发送完毕，该函数必须被调用一次，如果不调用，客户端永远处于等待的状态